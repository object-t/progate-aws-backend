# Build Stage
FROM public.ecr.aws/docker/library/python:3.12-slim AS builder

COPY --from=ghcr.io/astral-sh/uv:latest /uv /usr/local/bin/uv

WORKDIR /app

ENV UV_COMPILE_BYTECODE=1

COPY uv.lock pyproject.toml ./

RUN uv sync --frozen --no-install-project --no-dev

COPY ./src ./src
COPY ./pyproject.toml pyproject.toml

RUN uv sync --frozen --no-dev


# Runtime stage
FROM public.ecr.aws/docker/library/python:3.12-slim

# 必要なパッケージをインストール
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

RUN groupadd -r appuser && useradd -r -g appuser appuser

WORKDIR /app

COPY --from=builder --chown=appuser:appuser /app/.venv /app/.venv

# Copy application code
COPY --from=builder --chown=appuser:appuser /app .

# Copy initialization scripts
COPY --chown=appuser:appuser ./scripts ./scripts

# Make scripts executable
RUN chmod +x /app/scripts/*.sh

ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV INIT_DATA=true

USER appuser

EXPOSE 8000

HEALTHCHECK --interval=30s --timeout=3s --start-period=30s --retries=3 \
  CMD python -c "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')" || exit 1

WORKDIR /app/src

# Use entrypoint script to initialize data before starting the application
ENTRYPOINT ["/app/scripts/entrypoint.sh"]
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
